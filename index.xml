<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Submitter Documentation</title>
    <link>http://comp350spring2021.github.io/</link>
    <description>Recent content on Submitter Documentation</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="http://comp350spring2021.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Back-End/DockerTest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Back-End/DockerTest/</guid>
      <description>This will describe how we test the functionality of our custom container and subexecutor script. These tests are to be very basic and treated like unit tests to ensure that we have the functionallity down for deployment and future tests.
Test Files     The files used for testing are:
 test.in test.out &amp;lt;MD5&amp;gt;.py  Test 1     We are simulating an event assignment in which the admin wants students to write a python program that takes any number of integers from the command line and sums them together.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Back-End/ExampleSubmissionJSON/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Back-End/ExampleSubmissionJSON/</guid>
      <description>When a student submits code via the front end web interface, a similar json file is created as shown below, and stored within the s3 bucket.
{ &amp;quot;submissionid&amp;quot;: &amp;quot;fc55c0190dde2bc413d8d1e79fb8cca2&amp;quot;, &amp;quot;admin&amp;quot;: &amp;quot;m.soltys&amp;quot;, &amp;quot;event&amp;quot;: &amp;quot;aws labs&amp;quot;, &amp;quot;problem&amp;quot;: &amp;quot;lab 5 - containers&amp;quot;, &amp;quot;tokens&amp;quot;: [ &amp;quot;d823640ab3b0f7a4a2bc9fc89661e940&amp;quot;, &amp;quot;240669d4326dea48bba75e066b90b76f&amp;quot;, &amp;quot;4b31d568d86a9350d746c7c2fe9bf5c8&amp;quot; ] } </description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Back-End/ExpiredEvents/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Back-End/ExpiredEvents/</guid>
      <description>How the back end takes care of expired events     Author: Rene Escamilla Last Update: May 2021
It begins in the front end&amp;hellip;
When an admin creates an event a .json file is generated and uploaded to the database. Each json file will contain the following:
 eventID: A string identifier that is the name of the event. assignmentName: A string identifier that is the name of the assignment.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Django/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Django/</guid>
      <description>Django Information     Author: Arthur Hui
Author: Shardad Shadrou
Last Updated: May 2021
   Django Information models.py views.py  eventCreate()   eventView(eventId)  submitToken(assignmentId) submitPython(submissionId, assignmentId) assignNew(eventId):   urls.py     We used Django to handle a lot of the website connection and deploy the html files. It is a high level python web frame work with a lot of utility.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/AccountCreation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/AccountCreation/</guid>
      <description>Author: Jon Camarillo
Last Update: May 2021
We chose to not apply account creation to the project, but future developments may require such functionality and so, account-create.html could potentially be used as a template. We did modify the UI, but the &amp;lt;style&amp;gt; tag is included in the HTML - it is not contained in a separate file. The UI was simple enough, so we thought it unnecessary to do so. Future modifications may require a separate file.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/CreateAssignment/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/CreateAssignment/</guid>
      <description>Author: Jon Camarillo
Last Updated: May 2021
File name: assign.html
One of the requirements of the project was to enable the user to create an assignment. The snapshot of the page contains the properties of the assignment that will then be stored in the database. For more info on {% crsf_token%}, refer to Django documentation here . Essentially, it is a security measure related to securing &amp;lt;form&amp;gt; data in the POST method that we use.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/CreateEvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/CreateEvent/</guid>
      <description>Author: Diego Gonzales
Last Update: May 2021
Admin is able to create an event for every assignment. This will include:
 Event Name and Assignment name. Start Date and Due Date. Team Size Test Cases and Grade Cases.  This will be used to run with the python file that students submit.   List of student emails.  This will be used to send the students a message that an event has been created.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/Dashboard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/Dashboard/</guid>
      <description>Author: John Camarillo
Last update: may 2021
file name: dashboard.html
The purpose of the dashboard was to display assignment information after one was selected from the drop-down menu as well as provide the user the ability to create a new assignment. When viewing the html file, you will notice elements contained in brackets. The use of brackets within the html file was a feature related to Django that allowed us to obtain and display assignment information stored in the database, such as the Event Name, Start Date, End Date, etc.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/login/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/login/</guid>
      <description>Author: Jon Camarillo
Last Updated: May 2021
file: login.html
The Admin Login page has not been fully implemented, but the structure of the page has been provdied in login.html. As was the case for the other html files, the &amp;lt;style&amp;gt; tag is not contained in a separate CSS file, and the &amp;lt;form&amp;gt; is can be easily modified. As it stands, the user is required to provide a username and password, otherwise the user will not be able to log in.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/ModifyEvent/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/AdminFunctions/ModifyEvent/</guid>
      <description>Author: Diego Gonzalez
Last Update: May 9, 2021
file: event-modify.html
As of 5/9/2021, we are holding off on featuring the modification of events. However, the premise of the associated HTML file is such that admin is able to modify an event for every assignment. That is, the admin would be able to change any combination of properties related to an existing event. The admin will first choose which assignment they would like to modify, and then be taken to the same steps as create event.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/StudentSubmit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/StudentSubmit/</guid>
      <description>Author: Alex Sullivan
Last Update: 4/4/2021
A student can submit python source code for an assignment via the front end web interface. Students submit one token for each member in their group. When all tokens are submitted, then they need to be validated.
Validation refers to making sure that all of the tokens submitted are associated with the same assignment. We allow very free form groups, and dont try to keep track of who is in which group.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Front-End/Website/TokenValidation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Front-End/Website/TokenValidation/</guid>
      <description>Author: Jon Camarillo
Last Update: May 2021
The Student Submissions (Enter Token) page was used to process student tokens. The tokens would be sent to a student&amp;rsquo;s email as soon as an assignment was created. The student would then validate the token, and only once the token was validated, would they be taken to the assignment submission page.
Inside html code are functions that are not displayed in the snapshot below.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://comp350spring2021.github.io/Tutorials/Sams-SSH-Article/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Tutorials/Sams-SSH-Article/</guid>
      <description>SSHelling into the VPC through the Bastion     Hopefully this will take some of the guess work out of using SSH to access resources on the VPC through the bastion. I will demonstrate how to add the bastion key with an additional key for some resource in our cloud. Any resource we would like to access will have an associated key and we will need that key to ssh into it.</description>
    </item>
    
    <item>
      <title>Git and GitHub</title>
      <link>http://comp350spring2021.github.io/Tutorials/Understanding-Git-and-Git-Hub/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Tutorials/Understanding-Git-and-Git-Hub/</guid>
      <description>Git and GitHub are not the same thing  Git GitHub   Lets Start With the Basics of Git  git init git add git commit, git log git reset, git checkout git revert   git branch  Creating a branch Merging   GitHub  Forking git clone git push       Git and GitHub are not the same thing     First lets get into what git and GitHub are and what the differences are.</description>
    </item>
    
    <item>
      <title>GitHub Desktop</title>
      <link>http://comp350spring2021.github.io/Tutorials/GitHub-Desktop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://comp350spring2021.github.io/Tutorials/GitHub-Desktop/</guid>
      <description>Alexander Tolley
Link to the google Slides </description>
    </item>
    
  </channel>
</rss>
